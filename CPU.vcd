$date
	Wed Dec 30 19:38:25 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! cpu_mem_addr [31:0] $end
$var wire 256 " cpu_mem_data [255:0] $end
$var wire 1 # cpu_mem_enable $end
$var wire 1 $ cpu_mem_write $end
$var wire 256 % mem_cpu_data [255:0] $end
$var wire 1 & mem_cpu_ack $end
$var reg 1 ' Clk $end
$var reg 1 ( Reset $end
$var reg 1 ) Start $end
$var reg 27 * address [26:0] $end
$var reg 1 + flag $end
$var reg 4 , index [3:0] $end
$var reg 25 - tag [24:0] $end
$var integer 32 . counter [31:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 j [31:0] $end
$var integer 32 1 outfile [31:0] $end
$var integer 32 2 outfile2 [31:0] $end
$scope module CPU $end
$var wire 1 ' clk_i $end
$var wire 32 3 mem_addr_o [31:0] $end
$var wire 256 4 mem_data_o [255:0] $end
$var wire 1 # mem_enable_o $end
$var wire 1 $ mem_write_o $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 256 5 mem_data_i [255:0] $end
$var wire 1 & mem_ack_i $end
$scope module ALU $end
$var wire 32 6 data2_i [31:0] $end
$var wire 32 7 data1_i [31:0] $end
$var wire 3 8 ALUCtrl_i [2:0] $end
$var reg 32 9 data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 10 : funct_i [9:0] $end
$var wire 2 ; ALUOp_i [1:0] $end
$var reg 3 < ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 = data2_i [31:0] $end
$var wire 32 > data_o [31:0] $end
$var wire 32 ? data1_i [31:0] $end
$upscope $end
$scope module Add_PC_Branch $end
$var wire 32 @ data1_i [31:0] $end
$var wire 32 A data_o [31:0] $end
$var wire 32 B data2_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 7 C Op_i [6:0] $end
$var wire 1 D NoOp_i $end
$var reg 2 E ALUOp_o [1:0] $end
$var reg 1 F ALUSrc_o $end
$var reg 1 G Branch_o $end
$var reg 1 H MemRead_o $end
$var reg 1 I MemWrite_o $end
$var reg 1 J MemtoReg_o $end
$var reg 1 K RegWrite_o $end
$upscope $end
$scope module EXMEM $end
$var wire 32 L ALUResult_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 1 M RegWrite_i $end
$var wire 5 N RDaddr_i [4:0] $end
$var wire 1 O MemtoReg_i $end
$var wire 1 P MemWrite_i $end
$var wire 1 Q MemStall_i $end
$var wire 1 R MemRead_i $end
$var wire 32 S MUX_B_i [31:0] $end
$var reg 32 T ALUResult_o [31:0] $end
$var reg 32 U MUX_B_o [31:0] $end
$var reg 1 V MemRead_o $end
$var reg 1 W MemWrite_o $end
$var reg 1 X MemtoReg_o $end
$var reg 5 Y RDaddr_o [4:0] $end
$var reg 1 Z RegWrite_o $end
$upscope $end
$scope module Forward_Unit $end
$var wire 5 [ MemRd_i [4:0] $end
$var wire 1 Z MemRegWrite_i $end
$var wire 1 \ WBRegWrite_i $end
$var wire 5 ] WBRd_i [4:0] $end
$var wire 5 ^ EXRs2_i [4:0] $end
$var wire 5 _ EXRs1_i [4:0] $end
$var reg 2 ` ForwardA_o [1:0] $end
$var reg 2 a ForwardB_o [1:0] $end
$upscope $end
$scope module Hazard_Detection $end
$var wire 5 b data3_i [4:0] $end
$var wire 5 c data2_i [4:0] $end
$var wire 5 d data1_i [4:0] $end
$var wire 1 R MemRead_i $end
$var reg 1 D NoOp_o $end
$var reg 1 e PCWrite_o $end
$var reg 1 f Stall_o $end
$upscope $end
$scope module IDEX $end
$var wire 2 g ALUOp_i [1:0] $end
$var wire 1 F ALUSrc_i $end
$var wire 1 H MemRead_i $end
$var wire 1 I MemWrite_i $end
$var wire 1 J MemtoReg_i $end
$var wire 1 K RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 10 h funct_i [9:0] $end
$var wire 32 i imm_i [31:0] $end
$var wire 32 j data2_i [31:0] $end
$var wire 32 k data1_i [31:0] $end
$var wire 5 l RS2addr_i [4:0] $end
$var wire 5 m RS1addr_i [4:0] $end
$var wire 5 n RDaddr_i [4:0] $end
$var wire 1 Q MemStall_i $end
$var reg 2 o ALUOp_o [1:0] $end
$var reg 1 p ALUSrc_o $end
$var reg 1 R MemRead_o $end
$var reg 1 P MemWrite_o $end
$var reg 1 O MemtoReg_o $end
$var reg 5 q RDaddr_o [4:0] $end
$var reg 5 r RS1addr_o [4:0] $end
$var reg 5 s RS2addr_o [4:0] $end
$var reg 1 M RegWrite_o $end
$var reg 32 t data1_o [31:0] $end
$var reg 32 u data2_o [31:0] $end
$var reg 10 v funct_o [9:0] $end
$var reg 32 w imm_o [31:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 f Stall_i $end
$var wire 1 ' clk_i $end
$var wire 32 x instr_i [31:0] $end
$var wire 32 y PC_i [31:0] $end
$var wire 1 Q MemStall_i $end
$var wire 1 z Flush_i $end
$var reg 32 { PC_o [31:0] $end
$var reg 32 | instr_o [31:0] $end
$upscope $end
$scope module If_Branch $end
$var wire 1 G Branch_i $end
$var wire 32 } data2_i [31:0] $end
$var wire 32 ~ data1_i [31:0] $end
$var reg 1 !" compare $end
$var reg 1 z data_o $end
$upscope $end
$scope module Imm_Gen $end
$var wire 32 "" data_i [31:0] $end
$var wire 7 #" opcode [6:0] $end
$var wire 12 $" imme [11:0] $end
$var wire 32 %" data_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 &" instr_o [31:0] $end
$var wire 32 '" addr_i [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 (" ALUResult_i [31:0] $end
$var wire 1 X MemtoReg_i $end
$var wire 5 )" RDaddr_i [4:0] $end
$var wire 1 Z RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 *" ReadData_i [31:0] $end
$var wire 1 Q MemStall_i $end
$var reg 32 +" ALUResult_o [31:0] $end
$var reg 1 ," MemtoReg_o $end
$var reg 5 -" RDaddr_o [4:0] $end
$var reg 32 ." ReadData_o [31:0] $end
$var reg 1 \ RegWrite_o $end
$upscope $end
$scope module MUX_A $end
$var wire 32 /" data0_i [31:0] $end
$var wire 32 0" data2_i [31:0] $end
$var wire 2 1" forward_i [1:0] $end
$var wire 32 2" data1_i [31:0] $end
$var reg 32 3" data_o [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 4" data2_i [31:0] $end
$var wire 1 p select_i $end
$var wire 32 5" data1_i [31:0] $end
$var reg 32 6" data_o [31:0] $end
$upscope $end
$scope module MUX_B $end
$var wire 32 7" data0_i [31:0] $end
$var wire 32 8" data2_i [31:0] $end
$var wire 2 9" forward_i [1:0] $end
$var wire 32 :" data1_i [31:0] $end
$var reg 32 ;" data_o [31:0] $end
$upscope $end
$scope module MUX_Mem2Reg $end
$var wire 32 <" data1_i [31:0] $end
$var wire 32 =" data2_i [31:0] $end
$var wire 1 ," select_i $end
$var reg 32 >" data_o [31:0] $end
$upscope $end
$scope module MUX_PCSource $end
$var wire 32 ?" data1_i [31:0] $end
$var wire 32 @" data2_i [31:0] $end
$var wire 1 z select_i $end
$var reg 32 A" data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 e PCWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 B" pc_i [31:0] $end
$var wire 1 ( rst_i $end
$var wire 1 C" stall_i $end
$var wire 1 ) start_i $end
$var reg 32 D" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 E" RDaddr_i [4:0] $end
$var wire 32 F" RDdata_i [31:0] $end
$var wire 5 G" RS1addr_i [4:0] $end
$var wire 5 H" RS2addr_i [4:0] $end
$var wire 1 \ RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 I" RS2data_o [31:0] $end
$var wire 32 J" RS1data_o [31:0] $end
$upscope $end
$scope module dcache $end
$var wire 1 K" cache_dirty $end
$var wire 1 L" cache_sram_enable $end
$var wire 4 M" cache_sram_index [3:0] $end
$var wire 1 N" cache_sram_write $end
$var wire 1 ' clk_i $end
$var wire 1 V cpu_MemRead_i $end
$var wire 1 W cpu_MemWrite_i $end
$var wire 32 O" cpu_addr_i [31:0] $end
$var wire 32 P" cpu_data_i [31:0] $end
$var wire 32 Q" cpu_data_o [31:0] $end
$var wire 1 R" cpu_req $end
$var wire 1 Q cpu_stall_o $end
$var wire 256 S" mem_data_o [255:0] $end
$var wire 1 T" mem_enable_o $end
$var wire 1 U" mem_write_o $end
$var wire 1 ( rst_i $end
$var wire 1 V" write_hit $end
$var wire 1 W" sram_valid $end
$var wire 22 X" sram_tag [21:0] $end
$var wire 1 Y" sram_dirty $end
$var wire 25 Z" sram_cache_tag [24:0] $end
$var wire 256 [" sram_cache_data [255:0] $end
$var wire 256 \" r_hit_data [255:0] $end
$var wire 256 ]" mem_data_i [255:0] $end
$var wire 32 ^" mem_addr_o [31:0] $end
$var wire 1 & mem_ack_i $end
$var wire 1 _" hit $end
$var wire 23 `" cpu_tag [22:0] $end
$var wire 5 a" cpu_offset [4:0] $end
$var wire 4 b" cpu_index [3:0] $end
$var wire 25 c" cache_sram_tag [24:0] $end
$var wire 256 d" cache_sram_data [255:0] $end
$var reg 1 e" cache_write $end
$var reg 32 f" cpu_data [31:0] $end
$var reg 1 g" mem_enable $end
$var reg 1 h" mem_write $end
$var reg 3 i" state [2:0] $end
$var reg 256 j" w_hit_data [255:0] $end
$var reg 1 k" write_back $end
$var integer 32 l" start [31:0] $end
$scope module dcache_sram $end
$var wire 4 m" addr_i [3:0] $end
$var wire 1 ' clk_i $end
$var wire 256 n" data_i [255:0] $end
$var wire 1 L" enable_i $end
$var wire 1 ( rst_i $end
$var wire 25 o" tag_i [24:0] $end
$var wire 1 N" write_i $end
$var reg 256 p" data_o [255:0] $end
$var reg 1 _" hit_o $end
$var reg 25 q" tag_o [24:0] $end
$var integer 32 r" i [31:0] $end
$var integer 32 s" j [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 & ack_o $end
$var wire 32 t" addr_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 256 u" data_i [255:0] $end
$var wire 256 v" data_o [255:0] $end
$var wire 1 # enable_i $end
$var wire 1 ( rst_i $end
$var wire 1 $ write_i $end
$var wire 27 w" addr [26:0] $end
$var reg 4 x" count [3:0] $end
$var reg 256 y" data [255:0] $end
$var reg 2 z" state [1:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 z"
bx y"
b0 x"
bz w"
bx v"
bz u"
bz t"
b10 s"
b10000 r"
b0 q"
b0 p"
b1000000000000000000000000 o"
bx n"
b0 m"
b0 l"
0k"
bx j"
b0 i"
0h"
0g"
bx f"
0e"
bx d"
b1000000000000000000000000 c"
b0 b"
b0 a"
b0 `"
0_"
b0 ^"
bx ]"
bx \"
b0 ["
b0 Z"
0Y"
b0 X"
0W"
0V"
0U"
0T"
b0 S"
0R"
bx Q"
b0 P"
b0 O"
0N"
b0 M"
0L"
0K"
bx J"
bx I"
b0 H"
b0 G"
b0 F"
b0 E"
b0 D"
zC"
b100 B"
b100 A"
b0 @"
b100 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
0,"
b0 +"
bx *"
b0 )"
b0 ("
b0 '"
bx &"
b0 %"
b0 $"
b0 #"
b0 ""
0!"
bx ~
bx }
b0 |
b0 {
0z
b0 y
bx x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
0p
b0 o
b0 n
b0 m
b0 l
bx k
bx j
b0 i
b0 h
b0 g
0f
1e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
0\
b0 [
0Z
b0 Y
0X
0W
0V
b0 U
b0 T
b0 S
0R
0Q
0P
0O
b0 N
0M
b0 L
0K
0J
0I
0H
0G
0F
b0 E
0D
b0 C
b0 B
b0 A
b0 @
b0 ?
b100 >
b100 =
b110 <
b0 ;
b0 :
b0 9
b110 8
b0 7
b0 6
bx 5
bz 4
bz 3
bx 2
bx 1
bx 0
bx /
b0 .
bx -
bx ,
x+
bx *
0)
1(
0'
0&
bx %
z$
z#
bz "
bz !
$end
#12
1!"
b0 k
b0 ~
b0 J"
b0 j
b0 }
b0 I"
b101 2
b11 1
b10 0
b1000000000000111010010011 x
b1000000000000111010010011 &"
b1000000000 /
1)
0(
#25
b100000 A
b100000 @"
b100000 @
1K
1F
b10000 i
b10000 %"
b10000 $"
b10011 C
b10000 H"
b10000 c
b10000 l
b11101 n
b10011 #"
b1000000000000111010010011 |
b1000000000000111010010011 ""
bx ."
bx ="
b1 .
0+
1'
#50
0'
#75
b10000 9
b10000 L
b10000 6
b10000 6"
b11101 N
b11101 b
b11101 q
b10000 ^
b10000 s
b10000 w
b10000 4"
1M
1p
b10 .
1'
#100
0'
#125
b10000000 l"
b10000 a"
b11101 Y
b11101 [
b11101 )"
b10000 T
b10000 ("
b10000 0"
b10000 8"
b10000 O"
1Z
b11 .
1'
#150
0'
#175
b10000 2"
b10000 :"
b10000 >"
b10000 F"
b11101 ]
b11101 -"
b11101 E"
b10000 +"
b10000 <"
1\
b100 .
1'
#200
0'
#225
b101 .
1'
#250
0'
#275
b110 .
1'
#300
0'
#325
b111 .
1'
#350
0'
#375
b1000 .
1'
#400
0'
#425
b1001 .
1'
#450
0'
#475
b1010 .
1'
#500
0'
#525
b1011 .
1'
#550
0'
#575
b1100 .
1'
#600
0'
#625
b1101 .
1'
#650
0'
#675
b1110 .
1'
#700
0'
#725
b1111 .
1'
#750
0'
#775
b10000 .
1'
#800
0'
#825
b10001 .
1'
#850
0'
#875
b10010 .
1'
#900
0'
#925
b10011 .
1'
#950
0'
#975
b10100 .
1'
#1000
0'
#1025
b10101 .
1'
#1050
0'
#1075
b10110 .
1'
#1100
0'
#1125
b10111 .
1'
#1150
0'
#1175
b11000 .
1'
#1200
0'
#1225
b11001 .
1'
#1250
0'
#1275
b11010 .
1'
#1300
0'
#1325
b11011 .
1'
#1350
0'
#1375
b11100 .
1'
#1400
0'
#1425
b11101 .
1'
#1450
0'
#1475
b11110 .
1'
#1500
0'
#1525
b11111 .
1'
#1550
0'
#1575
b100000 .
1'
#1600
0'
#1625
b100001 .
1'
#1650
0'
#1675
b100010 .
1'
#1700
0'
#1725
b100011 .
1'
#1750
0'
#1775
b100100 .
1'
#1800
0'
#1825
b100101 .
1'
#1850
0'
#1875
b100110 .
1'
#1900
0'
#1925
b100111 .
1'
#1950
0'
#1975
b101000 .
1'
#2000
0'
#2025
b101001 .
1'
#2050
0'
#2075
b101010 .
1'
#2100
0'
#2125
b101011 .
1'
#2150
0'
#2175
b101100 .
1'
#2200
0'
#2225
b101101 .
1'
#2250
0'
#2275
b101110 .
1'
#2300
0'
#2325
b101111 .
1'
#2350
0'
#2375
b110000 .
1'
#2400
0'
#2425
b110001 .
1'
#2450
0'
#2475
b110010 .
1'
#2500
0'
#2525
b110011 .
1'
#2550
0'
#2575
b110100 .
1'
#2600
0'
#2625
b110101 .
1'
#2650
0'
#2675
b110110 .
1'
#2700
0'
#2725
b110111 .
1'
#2750
0'
#2775
b111000 .
1'
#2800
0'
#2825
b111001 .
1'
#2850
0'
#2875
b111010 .
1'
#2900
0'
#2925
b111011 .
1'
#2950
0'
#2975
b111100 .
1'
#3000
0'
#3025
b111101 .
1'
#3050
0'
#3075
b111110 .
1'
#3100
0'
#3125
b111111 .
1'
#3150
0'
#3175
b1000000 .
1'
#3200
0'
#3225
b1000001 .
1'
#3250
0'
#3275
b1000010 .
1'
#3300
0'
#3325
b1000011 .
1'
#3350
0'
#3375
b1000100 .
1'
#3400
0'
#3425
b1000101 .
1'
#3450
0'
#3475
b1000110 .
1'
#3500
0'
#3525
b1000111 .
1'
#3550
0'
#3575
b1001000 .
1'
#3600
0'
#3625
b1001001 .
1'
#3650
0'
#3675
b1001010 .
1'
#3700
0'
#3725
b1001011 .
1'
#3750
0'
#3775
b1001100 .
1'
#3800
0'
#3825
b1001101 .
1'
#3850
0'
#3875
b1001110 .
1'
#3900
0'
#3925
b1001111 .
1'
#3950
0'
#3975
b1010000 .
1'
#4000
0'
#4025
b1010001 .
1'
#4050
0'
#4075
b1010010 .
1'
#4100
0'
#4125
b1010011 .
1'
#4150
0'
#4175
b1010100 .
1'
#4200
0'
#4225
b1010101 .
1'
#4250
0'
#4275
b1010110 .
1'
#4300
0'
#4325
b1010111 .
1'
#4350
0'
#4375
b1011000 .
1'
#4400
0'
#4425
b1011001 .
1'
#4450
0'
#4475
b1011010 .
1'
#4500
0'
#4525
b1011011 .
1'
#4550
0'
#4575
b1011100 .
1'
#4600
0'
#4625
b1011101 .
1'
#4650
0'
#4675
b1011110 .
1'
#4700
0'
#4725
b1011111 .
1'
#4750
0'
#4775
b1100000 .
1'
#4800
0'
#4825
b1100001 .
1'
#4850
0'
#4875
b1100010 .
1'
#4900
0'
#4925
b1100011 .
1'
#4950
0'
#4975
b1100100 .
1'
#5000
0'
#5025
b1100101 .
1'
#5050
0'
#5075
b1100110 .
1'
#5100
0'
#5125
b1100111 .
1'
#5150
0'
#5175
b1101000 .
1'
#5200
0'
#5225
b1101001 .
1'
#5250
0'
#5275
b1101010 .
1'
#5300
0'
#5325
b1101011 .
1'
#5350
0'
#5375
b1101100 .
1'
#5400
0'
#5425
b1101101 .
1'
#5450
0'
#5475
b1101110 .
1'
#5500
0'
#5525
b1101111 .
1'
#5550
0'
#5575
b1110000 .
1'
#5600
0'
#5625
b1110001 .
1'
#5650
0'
#5675
b1110010 .
1'
#5700
0'
#5725
b1110011 .
1'
#5750
0'
#5775
b1110100 .
1'
#5800
0'
#5825
b1110101 .
1'
#5850
0'
#5875
b1110110 .
1'
#5900
0'
#5925
b1110111 .
1'
#5950
0'
#5975
b1111000 .
1'
#6000
0'
#6025
b1111001 .
1'
#6050
0'
#6075
b1111010 .
1'
#6100
0'
#6125
b1111011 .
1'
#6150
0'
#6175
b1111100 .
1'
#6200
0'
#6225
b1111101 .
1'
#6250
0'
#6275
b1111110 .
1'
#6300
0'
#6325
b1111111 .
1'
#6350
0'
#6375
b10000000 .
1'
#6400
0'
#6425
b10000001 .
1'
#6450
0'
#6475
b10000010 .
1'
#6500
0'
#6525
b10000011 .
1'
#6550
0'
#6575
b10000100 .
1'
#6600
0'
#6625
b10000101 .
1'
#6650
0'
#6675
b10000110 .
1'
#6700
0'
#6725
b10000111 .
1'
#6750
0'
#6775
b10001000 .
1'
#6800
0'
#6825
b10001001 .
1'
#6850
0'
#6875
b10001010 .
1'
#6900
0'
#6925
b10001011 .
1'
#6950
0'
#6975
b10001100 .
1'
#7000
0'
#7025
b10001101 .
1'
#7050
0'
#7075
b10001110 .
1'
#7100
0'
#7125
b10001111 .
1'
#7150
0'
#7175
b10010000 .
1'
#7200
0'
#7225
b10010001 .
1'
#7250
0'
#7275
b10010010 .
1'
#7300
0'
#7325
b10010011 .
1'
#7350
0'
#7375
b10010100 .
1'
#7400
0'
#7425
b10010101 .
1'
#7450
0'
#7475
b10010110 .
1'
#7500
0'
#7525
b10010111 .
1'
#7550
0'
#7575
b10011000 .
1'
#7600
0'
#7625
b10011001 .
1'
#7650
0'
#7675
b10011010 .
1'
#7700
0'
#7725
b10011011 .
1'
#7750
0'
#7775
b10011100 .
1'
#7800
0'
#7825
b10011101 .
1'
#7850
0'
#7875
b10011110 .
1'
#7900
0'
#7925
b10011111 .
1'
#7950
0'
#7975
b10100000 .
1'
#8000
0'
#8025
b10100001 .
1'
#8050
0'
#8075
b10100010 .
1'
#8100
0'
#8125
b10100011 .
1'
#8150
0'
#8175
b10100100 .
1'
#8200
0'
#8225
b10100101 .
1'
#8250
0'
#8275
b10100110 .
1'
#8300
0'
#8325
b10100111 .
1'
#8350
0'
#8375
b10101000 .
1'
#8400
0'
#8425
b10101001 .
1'
#8450
0'
#8475
b10101010 .
1'
#8500
0'
#8525
b10101011 .
1'
#8550
0'
#8575
b10101100 .
1'
#8600
0'
#8625
b10101101 .
1'
#8650
0'
#8675
b10101110 .
1'
#8700
0'
#8725
b10101111 .
1'
#8750
0'
#8775
b10110000 .
1'
#8800
0'
#8825
b10110001 .
1'
#8850
0'
#8875
b10110010 .
1'
#8900
0'
#8925
b10110011 .
1'
#8950
0'
#8975
b10110100 .
1'
#9000
0'
#9025
b10110101 .
1'
#9050
0'
#9075
b10110110 .
1'
#9100
0'
#9125
b10110111 .
1'
#9150
0'
#9175
b10111000 .
1'
#9200
0'
#9225
b10111001 .
1'
#9250
0'
#9275
b10111010 .
1'
#9300
0'
#9325
b10111011 .
1'
#9350
0'
#9375
b10111100 .
1'
#9400
0'
#9425
b10111101 .
1'
#9450
0'
#9475
b10111110 .
1'
#9500
0'
#9525
b10111111 .
1'
#9550
0'
#9575
b11000000 .
1'
#9600
0'
#9625
b11000001 .
1'
#9650
0'
#9675
b11000010 .
1'
#9700
0'
#9725
b11000011 .
1'
#9750
0'
#9775
b11000100 .
1'
#9800
0'
#9825
b11000101 .
1'
#9850
0'
#9875
b11000110 .
1'
#9900
0'
#9925
b11000111 .
1'
#9950
0'
#9975
b11001000 .
1'
#10000
0'
#10025
b11001001 .
b1111 *
b1111 ,
b0 -
b10000 /
b10 0
1'
#10050
0'
#10075
1'
